// Apiwat Ketsawong

// ฟังก์ชัน digitalClock: รับค่าจำนวนนาที (ในรูปวินาที) และคืนค่าผลลัพธ์ในรูปแบบเวลาที่เป็น HH:MM:SS
function digitalClock(sec) {
    // คำนวณชั่วโมง (h): 
    // นำจำนวนวินาทีหารด้วย 3600 เพื่อแปลงวินาทีเป็นชั่วโมง จากนั้นใช้ % 24 เพื่อให้แน่ใจว่าไม่เกิน 24 ชั่วโมง
    const h = Math.floor((sec / 3600) % 24);

    // คำนวณนาที (m): 
    // ใช้ sec % 3600 เพื่อหาเศษวินาทีที่เหลือจากการแบ่งด้วย 3600 แล้วหารด้วย 60 เพื่อแปลงวินาทีเป็นนาที
    const m = Math.floor((sec % 3600) / 60);

    // คำนวณวินาที (s):
    // ใช้ sec % 60 เพื่อหาเศษวินาทีที่เหลือจากการแบ่งด้วย 60
    const s = sec % 60;

    // จัดรูปแบบชั่วโมง (h):
    // ใช้ String(h).padStart(2, '0') เพื่อเติมเลข 0 ด้านหน้าหากค่าต่ำกว่า 10 เช่น 3 จะกลายเป็น "03"
    const formatH = String(h).padStart(2, '0');

    // จัดรูปแบบนาที (m):
    // ใช้เงื่อนไขตรวจสอบว่า m < 10 หรือไม่ ถ้าใช่ให้เติม 0 ด้านหน้า เช่น 9 จะกลายเป็น "09"
    const formatM = m < 10 ? '0' + m : m;

    // จัดรูปแบบวินาที (s):
    // ใช้ String(s).padStart(2, '0') เพื่อเติมเลข 0 ด้านหน้าหากค่าต่ำกว่า 10 เช่น 7 จะกลายเป็น "07"
    const formatS = String(s).padStart(2, '0');

    // คืนค่ารูปแบบเวลาที่เป็นสตริงในรูปแบบ HH:MM:SS
    return `${formatH}:${formatM}:${formatS}`;
}

// ทดสอบฟังก์ชันด้วยตัวอย่าง
console.log(digitalClock(5025));  // ผลลัพธ์: 01:23:45 (5025 วินาทีเท่ากับ 1 ชั่วโมง 23 นาที 45 วินาที)
console.log(digitalClock(61201)); // ผลลัพธ์: 17:00:01 (61201 วินาทีเท่ากับ 17 ชั่วโมง 0 นาที 1 วินาที)
console.log(digitalClock(87000)); // ผลลัพธ์: 00:10:00 (87000 วินาทีคือ 1 วัน และเหลืออีก 10 นาที)
