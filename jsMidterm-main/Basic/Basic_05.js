function getBudgets(obj) {
    // ขั้นตอนที่ 1: ใช้ map เพื่อสร้างอาร์เรย์ใหม่จาก 'budget' ของแต่ละอ็อบเจ็กต์
    // ฟังก์ชัน map จะวนลูปผ่านอาร์เรย์ของอ็อบเจ็กต์ และดึงค่า 'budget' ออกจากอ็อบเจ็กต์แต่ละตัว
    // ทำให้ได้อาร์เรย์ของจำนวน 'budget' เช่น [23000, 40000, 2700]
    return obj.map(m => m.budget)

        // ขั้นตอนที่ 2: ใช้ reduce เพื่อคำนวณผลรวมของอาร์เรย์ 'budget' ที่ได้จาก map
        // ฟังก์ชัน reduce จะทำงานกับอาร์เรย์ของ 'budget' โดยการสะสมผลรวมไปทีละตัว
        // 'acc' คือ accumulator ที่เก็บผลรวมทั้งหมดที่คำนวณได้
        // 'cer' คือค่าของ 'budget' ในอาร์เรย์ที่กำลังคำนวณในแต่ละรอบ
        // เริ่มต้นจากค่าของ accumulator ที่ 0 (เป็นค่าเริ่มต้น)
        .reduce((acc, cer) => acc + cer, 0); 
        // ฟังก์ชันนี้จะคำนวณผลรวมของ 'budget' ทุกตัวในอาร์เรย์ และคืนค่าผลรวมทั้งหมด
        // เช่น 23000 + 40000 + 2700 = 65700
    
    // หลังจาก reduce คำนวณเสร็จแล้ว จะได้ค่าผลรวมทั้งหมดของ 'budget' ซึ่งในตัวอย่างจะได้ 65700
}

// ตัวอย่างการทดสอบ:
console.log(getBudgets([
    // คำนวณผลรวม: 23000 + 40000 + 2700 = 65700
    { name: "John", age: 21, budget: 23000 },
    { name: "Steve", age: 32, budget: 40000 },
    { name: "Martin", age: 16, budget: 2700 },
]));  // ผลลัพธ์ที่คาด: 65700

console.log(getBudgets([
    // คำนวณผลรวม: 29000 + 32000 + 1600 = 62600
    { name: "John", age: 21, budget: 29000 },
    { name: "Steve", age: 32, budget: 32000 },
    { name: "Martin", age: 16, budget: 1600 },
]));  // ผลลัพธ์ที่คาด: 62600
